generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clients {
  id           String   @id @default(cuid())
  userIdGoogle String   @unique
  emailGoogle  String   @unique
  nameGoogle   String
  orders       Orders[]
  coupon       Coupon?
  contact      Contact?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userIdGoogle])
  @@index([emailGoogle])
}

model Orders {
  id           String   @id @unique @default(cuid())
  Clients      Clients? @relation(fields: [clientsId], references: [id], onDelete: Cascade)
  clientsId    String?
  amount_total Decimal  @db.Decimal(10, 2)

  OrdersItems OrdersItems[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([id])
}

model OrdersVariants {
  id String @id @unique @default(cuid())

  color String
  url   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrdersItems   OrdersItems @relation(fields: [ordersItemsId], references: [id], onDelete: Cascade)
  ordersItemsId String

  @@map("orders_variants")
}

model OrdersItems {
  id             String           @id @unique @default(cuid())
  product        String
  size           String[]
  price          Decimal          @db.Decimal(10, 2)
  gender         String
  brand          String
  description    String
  quantity       Int
  ordersVariants OrdersVariants[]
  discount       Int?
  categorie      String
  status         PaymentStatus

  orderId String
  Orders  Orders @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@map("orders_items")
}

enum PaymentStatus {
  requires_payment_method
  requires_confirmation
  requires_action
  processing
  requires_capture
  canceled
  succeeded
}

model Coupon {
  id         String   @id @default(cuid())
  discount   Int
  startDate  DateTime
  espiryDate DateTime
  expired    Boolean
  code       String   @unique

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  clientsId String  @unique
  clients   Clients @relation(fields: [clientsId], references: [id], onDelete: Cascade)

  @@index([expired])
  @@index([code])
  @@index([espiryDate])
}

model Contact {
  id String @id @unique @default(cuid())

  addres       String
  fullName     String
  phone_number Int

  clientId String  @unique
  clients  Clients @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
